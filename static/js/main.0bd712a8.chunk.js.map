{"version":3,"sources":["sections/About.js","providers/NotificationProvider.js","components/Timer.js","sections/Banner.js","sections/Configuration.js","sections/Testimonial.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","id","className","href","PRODUCTIVIY_CHECKER_KEY","NotificationContext","createContext","NotificationProvider","state","message","intervalInMinutes","active","sendNotification","_this","requestNotificationPermission","Notification","body","disableNotifications","clearInterval","notificationInterval","setState","persistToLocalStorage","enableNotifications","setIntervalNotification","_this$state","intervalInMili","timerStart","Date","setInterval","callback","permission","requestPermission","config","JSON","stringify","localStorage","setItem","loadFromLocalStorage","getItem","parse","Object","objectSpread","areNotificationsActive","getNotificationPreferences","_this$state2","setNotificationPreferences","settings","_this2","this","notification","Provider","value","props","children","Component","Timer","_useContext","useContext","_getNotificationPrefe","useEffect","updateDOM","concat","moment","add","fromNow","document","querySelector","innerText","updateInterval","Banner","buttonLabel","components_Timer","onClick","Configuration","onChange","event","target","type","placeholder","Number","Testimonial","App","NotificationProvider_NotificationProvider","sections_Banner","sections_About","sections_Configuration","sections_Testimonial","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bd712a8.chunk.js","sourcesContent":["import React from 'react';\n\nconst About = () => (\n  <div id=\"about\" className=\"about\">\n    <h1>About...</h1>\n    <p>\n      This website can send you an alert that would ask about if you are\n      productive at that moment.\n    </p>\n    <p>\n      This simple interruption gives you awareness of what you are doing and its\n      importance, and will help you to stop procrastinating or prioritizing more\n      you tasks.\n    </p>\n    <p>\n      This is a simple productivity tip that I learn from{' '}\n      <a href=\"https://www.amazon.com/Produtividade-Para-Tempo-Portugues-Brasil/dp/8545200978/ref=sr_1_1\">\n        this book\n      </a>{' '}\n      that did an incredible productivity boost on my daily activities.\n    </p>\n    <p>\n      Future versions of this website will allow users to download and use as an\n      offline app on Android devices.\n    </p>\n  </div>\n);\n\nexport default About;\n","import React, { Component, createContext } from 'react';\n\nexport const PRODUCTIVIY_CHECKER_KEY = 'PRODUCTIVITY_CHECKER_CONFIGS';\n\nexport const NotificationContext = createContext();\n\nexport default class NotificationProvider extends Component {\n  state = {\n    message: 'Are you productive right now?',\n    intervalInMinutes: 60,\n    active: false\n  };\n\n  componentDidMount() {\n    this.loadFromLocalStorage(() => {\n      this.setIntervalNotification();\n    });\n  }\n\n  componentWillUnmount() {\n    this.disableNotifications();\n  }\n\n  sendNotification = message => {\n    this.requestNotificationPermission();\n\n    return new Notification('Productivity Checker', {\n      body: message\n    });\n  };\n\n  disableNotifications = () => {\n    clearInterval(this.notificationInterval);\n    this.setState({ active: false }, this.persistToLocalStorage);\n    this.sendNotification('Notifications disabled');\n  };\n\n  enableNotifications = () => {\n    this.setState({ active: true }, this.persistToLocalStorage);\n    this.setIntervalNotification();\n    this.sendNotification('Notifications enabled');\n  };\n\n  setIntervalNotification = () => {\n    const { intervalInMinutes, message } = this.state;\n    const intervalInMili = intervalInMinutes * 60 * 1000;\n\n    this.setState({ timerStart: new Date() });\n\n    clearInterval(this.notificationInterval);\n\n    this.notificationInterval = setInterval(() => {\n      this.sendNotification(message);\n      this.setState({ timerStart: new Date() });\n    }, intervalInMili);\n  };\n\n  requestNotificationPermission = callback => {\n    const { permission } = Notification;\n    if (permission === 'denied' || permission === 'default') {\n      Notification.requestPermission(callback);\n    }\n  };\n\n  persistToLocalStorage = () => {\n    const config = JSON.stringify(this.state);\n    localStorage.setItem(PRODUCTIVIY_CHECKER_KEY, config);\n  };\n\n  loadFromLocalStorage = callback => {\n    const config = localStorage.getItem(PRODUCTIVIY_CHECKER_KEY);\n    const state = JSON.parse(config);\n    this.setState({ ...state }, callback);\n  };\n\n  areNotificationsActive = () => {\n    return this.state.active;\n  };\n\n  getNotificationPreferences = () => {\n    const { message, intervalInMinutes, timerStart } = this.state;\n    return { message, intervalInMinutes, timerStart };\n  };\n\n  setNotificationPreferences = settings => {\n    this.setState({ ...settings });\n  };\n\n  render() {\n    const notification = {\n      enableNotifications: this.enableNotifications,\n      disableNotifications: this.disableNotifications,\n      areNotificationsActive: this.areNotificationsActive,\n      setNotificationPreferences: this.setNotificationPreferences,\n      getNotificationPreferences: this.getNotificationPreferences\n    };\n\n    return (\n      <NotificationContext.Provider value={notification}>\n        {this.props.children}\n      </NotificationContext.Provider>\n    );\n  }\n}\n","import React, { useEffect, useContext } from 'react';\nimport moment from 'moment';\nimport { NotificationContext } from '../providers/NotificationProvider';\n\nconst Timer = () => {\n  const { getNotificationPreferences, areNotificationsActive } = useContext(\n    NotificationContext\n  );\n  const { intervalInMinutes, timerStart } = getNotificationPreferences();\n\n  useEffect(() => {\n    const relativeTime = () =>\n      moment(timerStart)\n        .add(intervalInMinutes, 'minutes')\n        .fromNow();\n\n    const updateDOM = () => {\n      const message = `You will be notified ${relativeTime()}`;\n      if (areNotificationsActive()) {\n        document.querySelector('.timer').innerText = message;\n        return;\n      }\n\n      document.querySelector('.timer').innerText = 'Click on the button below';\n      return;\n    };\n\n    updateDOM();\n\n    const updateInterval = setInterval(updateDOM, 60 * 1000);\n\n    return () => {\n      clearInterval(updateInterval);\n    };\n  });\n\n  return <span className=\"timer\" />;\n};\n\nexport default Timer;\n","import React, { useContext } from 'react';\n\nimport { NotificationContext } from '../providers/NotificationProvider';\n\nimport Timer from '../components/Timer';\n\nconst Banner = () => {\n  const {\n    areNotificationsActive,\n    enableNotifications,\n    disableNotifications\n  } = useContext(NotificationContext);\n\n  const buttonLabel = areNotificationsActive()\n    ? 'Turn off notifications'\n    : 'Turn on notifications';\n\n  const toggleNotification = () => {\n    if (areNotificationsActive()) {\n      disableNotifications();\n      return;\n    }\n    enableNotifications();\n  };\n\n  return (\n    <div className=\"banner\">\n      <div className=\"header\">\n        <span>Are you</span>\n        <span>productive</span>\n        <span>right now?</span>\n      </div>\n\n      <Timer />\n\n      <div className=\"controls\">\n        <button className=\"button white\" onClick={toggleNotification}>\n          {buttonLabel}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;\n","import React, { useContext } from 'react';\nimport { NotificationContext } from '../providers/NotificationProvider';\n\nconst Configuration = () => {\n  const {\n    enableNotifications,\n    disableNotifications,\n    setNotificationPreferences,\n    getNotificationPreferences\n  } = useContext(NotificationContext);\n\n  const { message, intervalInMinutes } = getNotificationPreferences();\n\n  const handleMessageUpdate = event => {\n    setNotificationPreferences({ message: event.target.value });\n  };\n\n  const handleTimeUpdate = event => {\n    setNotificationPreferences({\n      intervalInMinutes: Number(event.target.value)\n    });\n  };\n\n  return (\n    <div id=\"customize\" className=\"configuration\">\n      <h1>Customize...</h1>\n      <div className=\"line\">\n        <label>How would you like to be notified?</label>\n        <input\n          onChange={handleMessageUpdate}\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"Notification message\"\n          value={message}\n        />\n      </div>\n\n      <div className=\"line\">\n        <label>After how many minutes would you like to be notified?</label>\n        <input\n          onChange={handleTimeUpdate}\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"60\"\n          value={intervalInMinutes}\n        />\n      </div>\n\n      <div className=\"line\">\n        <button\n          className=\"button margin-right\"\n          type=\"button\"\n          onClick={enableNotifications}\n        >\n          Save and activate :)\n        </button>\n        <button\n          className=\"button margin-right\"\n          type=\"button\"\n          onClick={disableNotifications}\n        >\n          Turn off notifications :(\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Configuration;\n","import React from 'react';\n\nconst Testimonial = () => {\n  return (\n    <div id=\"testimonials\" className=\"testimonials\">\n      <h1>Testimonials...</h1>\n      <p>Did this tool help you? Send me a message and I will post it here!!</p>\n    </div>\n  );\n};\n\nexport default Testimonial;\n","import React, { Component } from 'react';\n\nimport About from './sections/About';\nimport Banner from './sections/Banner';\nimport Configuration from './sections/Configuration';\nimport Testimonial from './sections/Testimonial';\n\nimport './App.scss';\nimport NotificationProvider from './providers/NotificationProvider';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NotificationProvider>\n          <Banner />\n          <About />\n          <Configuration />\n        </NotificationProvider>\n        <Testimonial />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}