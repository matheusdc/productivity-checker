{"version":3,"sources":["sections/About.js","sections/Banner.js","sections/Configuration.js","sections/Testimonial.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","id","className","href","Banner","_ref","setNofiticationAlert","disableNotificationAlerts","isActive","buttonLabel","onClick","Configuration","handleMessageUpdate","handleTimeUpdate","onChange","type","placeholder","Testimonial","App","state","message","timeInMinutes","active","notifyUser","Notification","body","setupNotificationAlerts","_this","setState","requestNotificationPermission","requestPermission","_this$state","timeInMili","productivityAlertInterval","setInterval","clearInterval","isAlertActive","value","target","_ref2","this","sections_Banner","sections_About","sections_Configuration","sections_Testimonial","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91bae0c5.chunk.js","sourcesContent":["import React from 'react';\n\nconst About = () => (\n  <div id=\"about\" className=\"about\">\n    <h1>About...</h1>\n    <p>\n      This website can send you an alert that would ask about if you are\n      productive at that moment.\n    </p>\n    <p>\n      This simple interruption gives you awareness of what you are doing and its\n      importance, and will help you to stop procrastinating or prioritizing more\n      you tasks.\n    </p>\n    <p>\n      This is a simple productivity tip that I learn from{' '}\n      <a href=\"https://www.amazon.com/Produtividade-Para-Tempo-Portugues-Brasil/dp/8545200978/ref=sr_1_1\">\n        this book\n      </a>{' '}\n      that did an incredible productivity boost on my daily activities.\n    </p>\n    <p>\n      Future versions of this website will allow users to download and use as an\n      offline app on Android devices.\n    </p>\n  </div>\n);\n\nexport default About;\n","import React from 'react';\n\nconst Banner = ({\n  setNofiticationAlert,\n  disableNotificationAlerts,\n  isActive\n}) => {\n  const buttonLabel = isActive\n    ? 'Turn off notifications'\n    : 'Turn on notifications';\n\n  const toggleNotification = () => {\n    if (isActive) {\n      disableNotificationAlerts();\n      return;\n    }\n    setNofiticationAlert();\n  };\n\n  return (\n    <div className=\"banner\">\n      <div className=\"header\">\n        <span>Are you</span>\n        <span>productive</span>\n        <span>right now?</span>\n      </div>\n\n      <div className=\"controls\">\n        <button className=\"button white\" onClick={toggleNotification}>\n          {buttonLabel}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;\n","import React from 'react';\n\nconst Configuration = ({\n  handleMessageUpdate,\n  handleTimeUpdate,\n  setNofiticationAlert,\n  disableNotificationAlerts\n}) => {\n  return (\n    <div id=\"customize\" className=\"configuration\">\n      <h1>Customize...</h1>\n      <div className=\"line\">\n        <label>How would you like to be notified?</label>\n        <input\n          onChange={handleMessageUpdate}\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"Notification message\"\n        />\n      </div>\n\n      <div className=\"line\">\n        <label>After how many minutes would you like to be notified?</label>\n        <input\n          onChange={handleTimeUpdate}\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"60\"\n        />\n      </div>\n\n      <div className=\"line\">\n        <button\n          className=\"button margin-right\"\n          type=\"button\"\n          onClick={setNofiticationAlert}\n        >\n          Save and activate :)\n        </button>\n        <button\n          className=\"button margin-right\"\n          type=\"button\"\n          onClick={disableNotificationAlerts}\n        >\n          Turn off notifications :(\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Configuration;\n","import React from 'react';\n\nconst Testimonial = () => {\n  return (\n    <div id=\"testimonials\" className=\"testimonials\">\n      <h1>Testimonials...</h1>\n      <p>Did this tool help you? Send me a message and I will post it here!!</p>\n    </div>\n  );\n};\n\nexport default Testimonial;\n","import React, { Component } from 'react';\n\nimport About from './sections/About';\nimport Banner from './sections/Banner';\nimport Configuration from './sections/Configuration';\nimport Testimonial from './sections/Testimonial';\n\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    message: 'Are you productive right now?',\n    timeInMinutes: 60,\n    active: false\n  };\n\n  notifyUser = message => {\n    return new Notification('Productivity Checker', {\n      body: message\n    });\n  };\n\n  setupNotificationAlerts = () => {\n    const { timeInMinutes } = this.state;\n    this.disableNotificationAlerts();\n    this.setNofiticationAlert(timeInMinutes);\n    this.setState({ active: true });\n  };\n\n  requestNotificationPermission = () => {\n    return Notification.requestPermission();\n  };\n\n  setNofiticationAlert = () => {\n    const { timeInMinutes, message } = this.state;\n    const timeInMili = timeInMinutes * 60 * 1000;\n\n    this.notifyUser('Preferences saved!');\n\n    this.setState({ active: true });\n\n    this.productivityAlertInterval = setInterval(() => {\n      this.notifyUser(message);\n    }, timeInMili);\n  };\n\n  disableNotificationAlerts = () => {\n    clearInterval(this.productivityAlertInterval);\n    this.setState({ active: false });\n    this.notifyUser('Preferences saved!');\n  };\n\n  isAlertActive = () => {\n    return this.state.active;\n  };\n\n  componentWillUnmount() {\n    this.disableNotificationAlerts();\n  }\n\n  handleTimeUpdate = ({ target }) => {\n    const { value } = target;\n    this.setState({ timeInMinutes: value });\n  };\n\n  handleMessageUpdate = ({ target }) => {\n    const { value } = target;\n    this.setState({ message: value });\n  };\n\n  render() {\n    this.requestNotificationPermission();\n\n    return (\n      <div className=\"App\">\n        <Banner\n          setNofiticationAlert={this.setNofiticationAlert}\n          disableNotificationAlerts={this.disableNotificationAlerts}\n          isActive={this.state.active}\n        />\n        <About />\n        <Configuration\n          handleMessageUpdate={this.handleMessageUpdate}\n          handleTimeUpdate={this.handleTimeUpdate}\n          setNofiticationAlert={this.setNofiticationAlert}\n          disableNotificationAlerts={this.disableNotificationAlerts}\n        />\n        <Testimonial />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}